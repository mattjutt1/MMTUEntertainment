# NIST SSDF v1.1 + OWASP Aligned Security Gates
# 
# PR Gates (fail-fast): sast_semgrep, secrets_gitleaks, sbom_sca
# Merge Queue Gates: sast_semgrep, secrets_gitleaks, sbom_sca (+ manual DAST)
# Note: dependency_review disabled (requires GitHub Advanced Security)
# All gates upload SARIF to GitHub Security tab with deterministic SHA pins
#
name: Security Gates

on:
  pull_request:
    paths:
      - '**/*.{ts,tsx,js,jsx,json}'
      - '{pnpm-lock,pnpm-workspace,package}.{yaml,json}'
      - 'packages/**/*.{ts,tsx,js,jsx,json}'
      - '{.semgrep/**,.gitleaks.toml}'
      - '.github/workflows/security-gates.yml'
  merge_group:
    {}
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL for ZAP Baseline (required for manual run)'
        required: false
        type: string
  schedule:
    - cron: '0 6 * * 1' # Weekly, Mondays at 06:00 UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # dependency_review:
  #   # DISABLED: Requires GitHub Advanced Security for private repos
  #   if: github.event_name == 'pull_request'
  #   name: Dependency Review (fail on High)
  #   runs-on: ubuntu-latest

  sast_semgrep:
    if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run Semgrep (containerized CLI)
        env:
          SEMGREP_ENABLE_VERSION_CHECK: '0'
        run: >-
          docker run --rm -v "$PWD":/src -w /src
          returntocorp/semgrep:1.131.0
          semgrep ci --config=.semgrep/semgrep.yml --sarif -o semgrep.sarif
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@db69a5182d331d562e511302ae3c9aafd5fada6c # v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  secrets_gitleaks:
    if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
    name: Secrets - Gitleaks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@dcedce43c6f43de0b836d1fe38946645c9c638dc # v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_VERSION: "8.28.0"
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      - name: Upload Gitleaks SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@db69a5182d331d562e511302ae3c9aafd5fada6c # v3
        with:
          sarif_file: results.sarif
          category: gitleaks

  sbom_sca:
    if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
    name: SBOM + SCA (Syft/Grype)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Generate SBOM (SPDX JSON)
        uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json
      - name: Scan SBOM with Grype (fail on High/Critical)
        uses: anchore/scan-action@d5c127d5807a08a21a8bbb603b25e0fbd38cf9d4 # v6.5.1
        with:
          sbom: sbom.spdx.json
          fail-build: true
          severity-cutoff: high
          output-format: sarif
          output-file: grype.sarif
      - name: Fix Grype SARIF for GitHub Code Scanning
        if: always()
        run: |
          if [ -f grype.sarif ]; then
            python3 scripts/fix-grype-sarif.py grype.sarif grype-fixed.sarif
            echo "✅ SARIF file processed for GitHub compatibility"
          else
            echo "⚠️ grype.sarif not found, creating empty SARIF for upload"
            python3 scripts/fix-grype-sarif.py /dev/null grype-fixed.sarif
          fi
      - name: Upload Grype SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@db69a5182d331d562e511302ae3c9aafd5fada6c # v3
        with:
          sarif_file: grype-fixed.sarif
          category: grype
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sbom-spdx
          path: sbom.spdx.json

  dast_zap:
    name: DAST - OWASP ZAP Baseline (manual/weekly)
    runs-on: ubuntu-latest
    # Only run for manual dispatch or scheduled events
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Determine target URL
        id: target
        run: |
          set -euo pipefail
          TARGET="${{ github.event.inputs.target_url || '' }}"
          if [ -z "$TARGET" ]; then
            TARGET="${{ vars.ZAP_BASELINE_URL || '' }}"
          fi
          if [ -z "$TARGET" ]; then
            echo "No ZAP target URL provided via workflow_dispatch input 'target_url' or repository variable 'ZAP_BASELINE_URL'." >&2
            exit 1
          fi
          echo "target=$TARGET" >> "$GITHUB_OUTPUT"
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@7c4deb10e6261301961c86d65d54a516394f9aed # v0.14.0
        with:
          target: ${{ steps.target.outputs.target }}
          cmd_options: '-a -j -J zap-baseline.json -T 180' # JSON output, 3min timeout
      - name: Convert ZAP JSON to SARIF (maintained)
        uses: SvanBoxel/zaproxy-to-ghas@75108d871da28d75dc07ef093cc74fc2b3f174e6 # v1
        with:
          zap_output_path: './zap-baseline.json'
          output_path: './zap.sarif'
      - name: Upload ZAP SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@db69a5182d331d562e511302ae3c9aafd5fada6c # v3
        with:
          sarif_file: zap.sarif
          category: zap
